.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::FILE=IO(0X260A328) 1"
.TH IO::FILE=IO(0X260A328) 1 "2016-07-04" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Welcome to tmuxtutor!"
.IX Header "Welcome to tmuxtutor!"
.SS "Prefix key"
.IX Subsection "Prefix key"
For every command in tmux you have to type a \s-1PREFIX.\s0 By default, this is
.PP
.Vb 1
\&      CTRL\-b
.Ve
.SS "Basic commands"
.IX Subsection "Basic commands"
Let's try our first command.
.PP
To show the current time, type
.PP
.Vb 1
\&      PREFIX + t
.Ve
.PP
To get back from the time display (or from any dialogue), type
.PP
.Vb 1
\&      q
.Ve
.PP
You can also type \s-1ESC\s0
.PP
To get a list of all keys that are bound to a command, type
.PP
.Vb 1
\&      PREFIX + ?
.Ve
.PP
Every key is listed with the exact command it is bound to. All available commands are listed in the man page.
.PP
To close this or other tutorials, just type
.PP
.Vb 1
\&      q
.Ve
.PP
which will end the \f(CW\*(C`less\*(C'\fR \fBand\fR close the window.
.SS "Sessions"
.IX Subsection "Sessions"
tmux has sessions. A session can have several windows, and a window can have several panes.
.PP
This tutorial is started as a session called \*(L"demo\*(R" which you should be able to see in the status bar at the bottom.
.PP
You can detach a session by typing
.PP
.Vb 1
\&      PREFIX + d
.Ve
.PP
You will be back in the shell where you started the session.
.PP
To reattach to this session, type
.PP
.Vb 1
\&      tmux attach \-t demo
.Ve
.PP
If there is only one session, you can omit the \-t option.
.PP
.Vb 2
\&      tmux ls
\&      tmux list\-sessions
.Ve
.PP
will list all your tmux sessions.
