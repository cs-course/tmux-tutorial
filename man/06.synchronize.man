.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::FILE=IO(0X1DC4328) 1"
.TH IO::FILE=IO(0X1DC4328) 1 "2016-07-30" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "tmuxtutor.synchronize"
.IX Header "tmuxtutor.synchronize"
Synchronizing panes means, that everything you type in one pane, will be typed into all other panes in the window.
.PP
You could use this for ssh to a number of different hosts and run a command, compare the output, etc.
.PP
Or to compare the outputs of a program for several versions of your language interpreter.
.PP
To try out synchronising you either have to open a new tmux window or another terminal, so that you can still read this manpage.
.PP
To open a new session in a new terminal, type
.PP
.Vb 1
\&      tmux new\-session \-s sync
.Ve
.PP
To open a new tmux window, type
.PP
.Vb 1
\&      PREFIX + c
.Ve
.PP
Now open 4 (or as many as you like) panes. In every new pane, type
.PP
.Vb 3
\&      NAME=some.name
\&      NAME=other.name
\&      ...
.Ve
.PP
Now activate synchronizing with
.PP
.Vb 1
\&      PREFIX + :set synchronize\-panes on
.Ve
.PP
Then echo the variable:
.PP
.Vb 1
\&      echo "Hello $NAME!"
.Ve
.PP
To deactivate, type
.PP
.Vb 1
\&      PREFIX + :set synchronize\-panes off
.Ve
.PP
Leaving out the 'on' or 'off' will toggle the option.
.PP
.Vb 1
\&      PREFIX + :set synchronize\-panes
.Ve
.PP
If you do this more often, it might be a good idea to bind this to a key.
.SH "Scripting"
.IX Header "Scripting"
Synchronizing is a good use case for scripting tmux.
.PP
In \f(CW\*(C`examples/06a.synchronize\-perlbrew.sh\*(C'\fR you will find a script that compares four perl versions with each other, via \f(CW\*(C`perlbrew\*(C'\fR. Maybe replace this with \f(CW\*(C`plenv\*(C'\fR, \f(CW\*(C`rbenv\*(C'\fR or any other interpreter switching tool and try it out.
